/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FootballTeamService } from "../footballTeam.service";
import { FootballTeamCreateInput } from "./FootballTeamCreateInput";
import { FootballTeam } from "./FootballTeam";
import { FootballTeamFindManyArgs } from "./FootballTeamFindManyArgs";
import { FootballTeamWhereUniqueInput } from "./FootballTeamWhereUniqueInput";
import { FootballTeamUpdateInput } from "./FootballTeamUpdateInput";

export class FootballTeamControllerBase {
  constructor(protected readonly service: FootballTeamService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FootballTeam })
  async createFootballTeam(
    @common.Body() data: FootballTeamCreateInput
  ): Promise<FootballTeam> {
    return await this.service.createFootballTeam({
      data: data,
      select: {
        captain: true,
        captainId: true,
        createdAt: true,
        emblem: true,
        id: true,
        name: true,
        playerTeam: true,
        teamDescription: true,
        teamLineup: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FootballTeam] })
  @ApiNestedQuery(FootballTeamFindManyArgs)
  async footballTeams(@common.Req() request: Request): Promise<FootballTeam[]> {
    const args = plainToClass(FootballTeamFindManyArgs, request.query);
    return this.service.footballTeams({
      ...args,
      select: {
        captain: true,
        captainId: true,
        createdAt: true,
        emblem: true,
        id: true,
        name: true,
        playerTeam: true,
        teamDescription: true,
        teamLineup: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FootballTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async footballTeam(
    @common.Param() params: FootballTeamWhereUniqueInput
  ): Promise<FootballTeam | null> {
    const result = await this.service.footballTeam({
      where: params,
      select: {
        captain: true,
        captainId: true,
        createdAt: true,
        emblem: true,
        id: true,
        name: true,
        playerTeam: true,
        teamDescription: true,
        teamLineup: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FootballTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFootballTeam(
    @common.Param() params: FootballTeamWhereUniqueInput,
    @common.Body() data: FootballTeamUpdateInput
  ): Promise<FootballTeam | null> {
    try {
      return await this.service.updateFootballTeam({
        where: params,
        data: data,
        select: {
          captain: true,
          captainId: true,
          createdAt: true,
          emblem: true,
          id: true,
          name: true,
          playerTeam: true,
          teamDescription: true,
          teamLineup: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FootballTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFootballTeam(
    @common.Param() params: FootballTeamWhereUniqueInput
  ): Promise<FootballTeam | null> {
    try {
      return await this.service.deleteFootballTeam({
        where: params,
        select: {
          captain: true,
          captainId: true,
          createdAt: true,
          emblem: true,
          id: true,
          name: true,
          playerTeam: true,
          teamDescription: true,
          teamLineup: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
