/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FootballTeam } from "./FootballTeam";
import { FootballTeamCountArgs } from "./FootballTeamCountArgs";
import { FootballTeamFindManyArgs } from "./FootballTeamFindManyArgs";
import { FootballTeamFindUniqueArgs } from "./FootballTeamFindUniqueArgs";
import { CreateFootballTeamArgs } from "./CreateFootballTeamArgs";
import { UpdateFootballTeamArgs } from "./UpdateFootballTeamArgs";
import { DeleteFootballTeamArgs } from "./DeleteFootballTeamArgs";
import { FootballTeamService } from "../footballTeam.service";
@graphql.Resolver(() => FootballTeam)
export class FootballTeamResolverBase {
  constructor(protected readonly service: FootballTeamService) {}

  async _footballTeamsMeta(
    @graphql.Args() args: FootballTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FootballTeam])
  async footballTeams(
    @graphql.Args() args: FootballTeamFindManyArgs
  ): Promise<FootballTeam[]> {
    return this.service.footballTeams(args);
  }

  @graphql.Query(() => FootballTeam, { nullable: true })
  async footballTeam(
    @graphql.Args() args: FootballTeamFindUniqueArgs
  ): Promise<FootballTeam | null> {
    const result = await this.service.footballTeam(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FootballTeam)
  async createFootballTeam(
    @graphql.Args() args: CreateFootballTeamArgs
  ): Promise<FootballTeam> {
    return await this.service.createFootballTeam({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FootballTeam)
  async updateFootballTeam(
    @graphql.Args() args: UpdateFootballTeamArgs
  ): Promise<FootballTeam | null> {
    try {
      return await this.service.updateFootballTeam({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FootballTeam)
  async deleteFootballTeam(
    @graphql.Args() args: DeleteFootballTeamArgs
  ): Promise<FootballTeam | null> {
    try {
      return await this.service.deleteFootballTeam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
